version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-forex_bot}
      POSTGRES_USER: ${DB_USER:-forex_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-forex_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-forex_user} -d ${DB_NAME:-forex_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-forex_bot}
      DB_USER: ${DB_USER:-forex_user}
      DB_PASSWORD: ${DB_PASSWORD:-forex_password}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 0
      REDIS_MAX_RETRIES: 30
      REDIS_RETRY_DELAY: 2

      # Telegram
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}

      # API Keys
      API_ALPHA_VANTAGE_KEY: ${API_ALPHA_VANTAGE_KEY}
      API_OPENAI_API_KEY: ${API_OPENAI_API_KEY}

      # Security
      SECURITY_SECRET_KEY: ${SECURITY_SECRET_KEY}

      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.workers.celery_app worker --loglevel=info
    environment:
      # Same environment as app
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-forex_bot}
      DB_USER: ${DB_USER:-forex_user}
      DB_PASSWORD: ${DB_PASSWORD:-forex_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_ALPHA_VANTAGE_KEY: ${API_ALPHA_VANTAGE_KEY}
      API_OPENAI_API_KEY: ${API_OPENAI_API_KEY}
      SECURITY_SECRET_KEY: ${SECURITY_SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.workers.celery_app beat --loglevel=info
    environment:
      # Same environment as app
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-forex_bot}
      DB_USER: ${DB_USER:-forex_user}
      DB_PASSWORD: ${DB_PASSWORD:-forex_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_ALPHA_VANTAGE_KEY: ${API_ALPHA_VANTAGE_KEY}
      API_OPENAI_API_KEY: ${API_OPENAI_API_KEY}
      SECURITY_SECRET_KEY: ${SECURITY_SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.workers.celery_app flower --port=5555
    environment:
      # Same environment as app
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-forex_bot}
      DB_USER: ${DB_USER:-forex_user}
      DB_PASSWORD: ${DB_PASSWORD:-forex_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_ALPHA_VANTAGE_KEY: ${API_ALPHA_VANTAGE_KEY}
      API_OPENAI_API_KEY: ${API_OPENAI_API_KEY}
      SECURITY_SECRET_KEY: ${SECURITY_SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
